default_platform(:ios)

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do

  lane :test_match do
      keychain_name = ENV["TEMP_KEYCHAIN_USER"]
      keychain_password = ENV["TEMP_KEYCHAIN_PASSWORD"]
      ensure_temp_keychain(keychain_name, keychain_password)

      match(
        type: 'appstore',
        app_identifier: ENV["APP_BUNDLE_IDS"],
        git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password
      )
  end

  lane :distribute_to_testflight do
    keychain_name = ENV["TEMP_KEYCHAIN_USER"]
    keychain_password = ENV["TEMP_KEYCHAIN_PASSWORD"]
    ensure_temp_keychain(keychain_name, keychain_password)

    match(
      type: 'appstore',
      app_identifier: ENV["DEVELOPER_APP_IDENTIFIERS"],
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

    gym(
      configuration: ENV["CONFIGURATION"],
      workspace: ENV["WORKSPACE"],
      scheme: ENV["SCHEME"],
      export_method: "app-store"
    )

    pilot(
      username: ENV["FASTLANE_APPLE_ID"],
      apple_id: ENV["DEVELOPER_APP_ID"],
      app_identifier: ENV["DEVELOPER_APP_IDENTIFIER"],
      ipa: ENV["IPA_FILE_PATH"],
      itc_provider: ENV["ITC_PROVIDER"],
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false
    )

    delete_temp_keychain(keychain_name)
  end
end

